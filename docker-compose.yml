services:
  # content:
  #   build:
  #     context: .
  #     dockerfile: ./apps/content-management/Dockerfile.dev
  #   volumes:
  #     - ./apps/content-management:/app/apps/content-management
  #   environment:
  #     - NODE_ENV=development
  #   networks:
  #     - micro-srv
  #   restart: unless-stopped

  # apisix:
  #   image: apache/apisix:3.13.0-debian
  #   restart: always
  #   volumes:
  #     - ./apisix_conf/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
  #     - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
  #   environment:
  #     - APISIX_STAND_ALONE=true
  #   ports:
  #     - "9180:9180/tcp"
  #     - "9080:9080/tcp"
  #     - "9091:9091/tcp"
  #     - "9443:9443/tcp"
  #     - "9094:9092/tcp"
  #   networks:
  #     - micro-srv

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - micro-srv

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    command: start-dev
    environment:
      KC_HOSTNAME: http://localhost:8080
      KC_HOSTNAME_ADMIN: http://localhost:8080
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - micro-srv

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: b19428f458848b7a98a498591f54d595
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - micro-srv
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 120s

  nginx-cdn:
    image: nginx:alpine
    ports:
      - "8090:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - micro-srv
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    ports:
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - micro-srv
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - LOGGING_LEVEL_COM_PROVECTUS=DEBUG
    ports:
      - "8081:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - micro-srv
    restart: unless-stopped

networks:
  micro-srv:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  nginx_cache:
  kafka_data:
